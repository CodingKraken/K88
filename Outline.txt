K88 Outline Document

=== GENERAL OVERVIEW ===
    - 8-bit processor
    - 16-bit addressing space, mem locations stored as two bytes (0000 -> FFFF)
    - 4 8-bit Registers (3 Data), 16 bit Program Counter + Address Register, and 8 bit Flags register
    - Little endian (Low order byte first, 0xFF00 = 0x00 0xFF)

=== INSTRUCTION SET ===

    HEX   |  NAME  | DESCRIPTION                                                    | EXAMPLE
    ----------------------------------------------------------------------------------------------------------
    0x0   |  ADD   | ADD an register/address to another register.                   | REG = REG + REG/MEM
    0x1   |  SUB   | SUBTRACT a register/address with another register.             | REG = REG - REG/MEM
    0x2   |  AND   | AND a register/address with a register.                        | REG = REG & REG/MEM
    0x3   |  OR    | OR a register/address with a register.                         | REG = REG | REG/MEM
    0x4   |  NOR   | NOR a register/address with a register.                        | REG = ~(REG | REG/MEM)
    0x5   |  CLF   | Clear flag instruction, clears a value stored in a flag.       | FGR = 0 
    0x6   |  CMP   | Compare a register with a value and set flags accordingly.     | FGS = REG CMP VAL
    0x7   |  PSH   | Pushes a register/address value onto the top of the stack.     | SP  = REG/MEM -> SP--
    0x8   |  POP   | Pops value off the stack and stores it in a register.          | REG = MEM[SP] -> SP++
    0x9   |  MOV   | Move instruction, moves data from mem/register to a register.  | REG = REG/MEM
    0xA   |  STO   | Store instruction, stores value from register in memory.       | MEM = REG
    0xB   |  JMP   | Unconditional Jump, jumps to given memory address.             | PC  = ADR
    0xC   |  JFS   | Jump if flag set, jumps to an address if a flag is set.        | PC  = FLG ? 1
    0xD   |  JSR   | Jumps to subroutine, and writes return location in the stack.  | PC  = SBR
    0xE   |  RTS   | Return from subroutine, jumps to address of last JSR.          | PC  = JSR 
    0xF   |  NOP   | No operation instruction, basically wastes a clock cycle.      | NO OPERATION

Instruction formatting:
    AAAA B CCC
    AAAA represents the hex code for the instruction
    B    indicates whether argument is a memory address or a register
    CCC  specifies the first register in the instruction

    The combined AAAABCCC represents the unique opcode for that instruction

    In the STO, JZ, and JS instructions the B bit is always low, in the CFG instruction the B bit is always high

    A CPU Halt can be triggered by an instruction opcode of 1111 1 111, which is technically a NOP

    Examples:
    0000 1 010
    First 4 bits indicate an addition, 1 indicates with a register, 010 specifies register 2, or
    the Z register as the first operand in the addition.

    The same instruction can take up different amount of space in memory depending on the argument type
    The ADD instruction is typically two bytes, but with an address argument this becomes 3 bytes.

=== ACCESSIBLE REGISTERS ===

    HEX REP      |  FULL NAME         | DESCRIPTION
    -------------------------------------------------------------------------------------------------------
    IDX  0x0    |  DATA REGISTER X   |  8-bit general purpose register, can hold any 8 bit integer value from 0-255.
    IDY  0x1    |  DATA REGISTER Y   |  8-bit general purpose register, identical to the X register.
    IDZ  0x2    |  DATA REGISTER Z   |  8-bit general purpose register, identical to both the X and Y registers.
    FGS  3->7   |  FLAGS REGISTER    |  8-bit register that holds the state of the cpu and the various flags.

=== FLAGS ===
    Z 0x3  | Zero flag, is set high if last instruction resulted in a zero.
    E 0x4  | Equals flag, is set high if comparison was equal.
    C 0x5  | Carry flag, is set high if comparison was greater, or if arithmetic operation resulted in overflow.
    V 0x6  | Overflow/Underflow flag, is set high if arithmetic operation violated Two's Complement.

    H 0x07  | Halt flag, if set high the cpu halts, if set low again the cpu continues from where it left off.
    
=== INTERNAL REGISTERS ===

    PROGRAM COUNTER         |  16-bit register which points to the location in memory being read from
    ADDRESS REGISTER        |  16-bit register which is used to hold memory addresses being accessed by instructions
    STACK POITNER           |  8-bit register which points to the last location accessed in the stack
    INSTRUCTION REGISTER    |  8-bit register which holds the opcode of the current instruction being processed

=== MEMORY ADDRESSING ===
    0x0000 -> 0x00FF is reserved for the stack.
    0x0100 -> 0x203F is reserved for genral-purpose Random Access Memory (8k RAM)
    0x2040 -> 0xFFE9 is reserved for Read-Only memory (56k ROM).
    0xFFEC -> 0xFFFF is protected memory and stores the reset sequence.
